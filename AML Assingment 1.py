# -*- coding: utf-8 -*-
"""Assingment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ldv4hhKcCfFQfI1LkNeqUbAxvmzrbazH
"""

# importing necessary libraries
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Defining cluster centers for data generation
centers = [[2, 4], [6, 6], [1, 9]]
n_classes = len(centers)
# Generate synthetic dataset with given cluster centers
data, labels = make_blobs(n_samples=150,
                          centers=np.array(centers),
                          random_state=1)

# Splitting data into 80% training and 20% testing sets
training_data, testing_data, training_data_label, testing_data_label=train_test_split(data, labels,
                                                                          train_size=0.8,
                                                                          test_size=0.2,
                                                                          random_state=7)

# Initialize and train K-Nearest Neighbors classifier
knn=KNeighborsClassifier()
knn.fit(training_data,training_data_label)
# Predict labels for training and testing datasets
training_data_prediction=knn.predict(training_data)
testing_data_prediction=knn.predict(testing_data)

# Accuracy score of training and testing dataset
training_data_accuracy=accuracy_score(training_data_prediction,training_data_label)
testing_data_accuracy=accuracy_score(testing_data_prediction,testing_data_label)
print("Accuracy of training set:", training_data_accuracy)
print("Accuracy of testing set:", testing_data_accuracy)

# Testing Dataset Confusion Matrix
TestData_confusion_matrix = confusion_matrix(testing_data_label, testing_data_prediction)
disp = ConfusionMatrixDisplay(confusion_matrix=TestData_confusion_matrix, display_labels=knn.classes_)
disp.plot(cmap=plt.cm.Purples)
plt.title('Testing dataset Confusion Matrix')
plt.show()

# Ploting training data
plt.figure(figsize=(12, 5))
plt.subplot(1,2,1)
plt.scatter(training_data[:,0],training_data[:,1],c=training_data_label,cmap='viridis')
plt.title('Training Dataset Plot')
plt.show()

# Ploting Testing Data
plt.figure(figsize=(12, 5))
plt.subplot(1,2,2)
plt.scatter(testing_data[:,0],testing_data[:,1],c=testing_data_label,cmap='viridis')
plt.title('Testing Dataset Plot')
plt.show()